const { v4: uuidv4 } = require('uuid');
const Report = require('../Schemas/Report')
const Videos = require('../Schemas/Videos')
const Podcast = require('../Schemas/Podcast')
const nf = require('../Functions/Notification_Factory')
const {Logger} = require('../Functions/Logger')


const createReport = async (req, res) => {
    try {
        const _id = uuidv4()
        const report = new Report({ _id, ...req.body })
        await report.save()
        await nf(
            req.userId, "generated", 'Report', `A report was generated by user of ID:${_id}`
        )
        res.json({ message: "success", data: report })

    } catch (error) {
        console.log(error)
        res.json({ message: "error", error })

    }
}
const getAllReports_ = async (req, res) => {
    try {
        const data = await Report.scan().exec()
        res.json({ count: data.length, data: data })
    } catch (error) {
        console.log(error)
        res.json({ message: "error", error })
    }
}
const getItemReports = async (req, res) => {
    try {
        const data = await Report.scan('reportItemId')
            .eq(req.params.id)
            .exec()
        res.json({ count: data.length, data: data })
    } catch (error) {
        console.log(error)
        res.json({ message: "error", error })
    }
}
const deleteReport = async (req, res) => { }


// admin reports
const getAllReports = async (req, res) => {
    try {
        let data = await Report.scan().exec()
        data = await __Report_Factory__(data)

        res.json(data)
    } catch (error) {
        console.log(error)
        res.json({ message: "error", error })
    }
}


const __Report_Factory__ = async (reports) => {
    // array of ids passing through set()
    let videos = await Promise.all(reports.map(async (e) => {
        try {
            let video = await Videos.get(e.reportItemId)
            if(video == undefined || video == null) return null
            return { ...e, type: "video", data: video }
        } catch (error) {
            return null

        }
    }))
    let podcast = await Promise.all(reports.map(async (e) => {
        try {
            let podcast = await Podcast.get(e.reportItemId)
            if(podcast == undefined || podcast == null) return null
            return { ...e, type: "podcast", data: podcast }
        } catch (error) {
            return null

        }
    }))

    // filter
    videos = videos.filter((e) => e != null)
    podcast = podcast.filter((e) => e != null)

    return { podcast, videos }

}


module.exports = { createReport, getAllReports, getItemReports, deleteReport }